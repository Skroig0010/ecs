// Generated by Haxe 4.0.0-preview.5+7eb789f
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
var ecs_Component = function() { };
var ecs_Entity = function() {
	this.components = new haxe_ds_StringMap();
	var this1 = ecs_Entity.entityId++;
	this.id = this1;
};
ecs_Entity.prototype = {
	hasComponent: function(componentName) {
		var _this = this.components;
		var key = "$" + componentName;
		if(__map_reserved[key] != null) {
			return _this.existsReserved(key);
		} else {
			return _this.h.hasOwnProperty(key);
		}
	}
	,addComponent: function(component) {
		var key = "$" + component.name;
		var _this = this.components;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,component);
		} else {
			_this.h[key] = component;
		}
		this.onComponentAdded.emit({ entity : this, componentName : component.name});
	}
	,removeComponent: function(componentName) {
		var _this = this.components;
		var key = "$" + componentName;
		var removedComponent = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		this.components.remove("$" + componentName);
		this.onComponentRemoved.emit({ entity : this, componentName : componentName, component : removedComponent});
	}
};
var ecs__$EntityId_EntityId_$Impl_$ = {};
ecs__$EntityId_EntityId_$Impl_$._new = function(id) {
	var this1 = id;
	return this1;
};
var ecs_EntityList = function() {
	this.entityList = new haxe_ds_List();
	this.entities = new haxe_ds_IntMap();
};
ecs_EntityList.prototype = {
	add: function(entity) {
		this.entityList.add(entity);
		this.entities.h[entity.id] = entity;
	}
	,remove: function(entity) {
		if(this.entityList.remove(entity)) {
			this.entities.remove(entity.id);
			return true;
		}
		return false;
	}
	,has: function(entity) {
		return this.entities.h.hasOwnProperty(entity.id);
	}
	,clear: function() {
		this.entityList.clear();
		this.entities = new haxe_ds_IntMap();
	}
	,toArray: function() {
		return Lambda.array(this.entityList);
	}
	,iterator: function() {
		return this.entities.iterator();
	}
};
var ecs_Family = function(componentNames) {
	this.entityRemoved = new ecs_Signal();
	this.entityAdded = new ecs_Signal();
	this.entities = new ecs_EntityList();
	this.componentNames = componentNames;
};
ecs_Family.prototype = {
	getEntities: function() {
		return this.entities.toArray();
	}
	,addEntityIfMatch: function(entity) {
		if(!this.entities.has(entity) && this.matchEntity(entity)) {
			this.entities.add(entity);
			this.entityAdded.emit(entity);
		}
	}
	,removeEntity: function(entity) {
		if(this.entities.has(entity)) {
			this.entities.remove(entity);
			this.entityRemoved.emit(entity);
		}
	}
	,onComponentAdded: function(msg) {
		this.addEntityIfMatch(msg.entity);
	}
	,onComponentRemoved: function(msg) {
		var _gthis = this;
		if(!this.entities.has(msg.entity)) {
			return;
		}
		this.componentNames.map(function(componentName) {
			if(componentName == msg.componentName) {
				_gthis.entities.remove(msg.entity);
				_gthis.entityRemoved.emit(msg.entity);
			}
			return;
		});
	}
	,matchEntity: function(entity) {
		var _g = 0;
		var _g1 = this.componentNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			if(!entity.hasComponent(name)) {
				return false;
			}
		}
		return true;
	}
};
var ecs__$FamilyId_FamilyId_$Impl_$ = {};
ecs__$FamilyId_FamilyId_$Impl_$._new = function(id) {
	var this1 = id;
	return this1;
};
var ecs_Signal = function() {
	this.listeners = new haxe_ds_List();
};
ecs_Signal.prototype = {
	add: function(listener) {
		this.listeners.add(listener);
	}
	,remove: function(listener) {
		return this.listeners.remove(listener);
	}
	,emit: function(message) {
		this.listeners.map(function(listener) {
			listener(message);
			return;
		});
	}
};
var ecs_System = function() { };
var ecs_World = function() {
	this.entities = new ecs_EntityList();
	this.systems = [];
	this.families = new haxe_ds_StringMap();
};
ecs_World.prototype = {
	addSystem: function(system) {
		this.systems.push(system);
		system.world = this;
		return this;
	}
	,removeSystem: function(system) {
		this.systems = this.systems.filter(function(sys) {
			return sys == system;
		});
	}
	,addEntity: function(entity) {
		Lambda.iter(this.families,function(family) {
			family.addEntityIfMatch(entity);
			return;
		});
		entity.onComponentAdded.add($bind(this,this.onComponentAdded));
		entity.onComponentRemoved.add($bind(this,this.onComponentRemoved));
		this.entities.add(entity);
	}
	,removeEntity: function(entity) {
		Lambda.iter(this.families,function(family) {
			family.removeEntity(entity);
			return;
		});
		this.entities.remove(entity);
	}
	,getEntities: function(componentNames) {
		var familyId = this.getFamilyId(componentNames);
		this.ensureFamilyExists(componentNames);
		var _this = this.families;
		return (__map_reserved[familyId] != null ? _this.getReserved(familyId) : _this.h[familyId]).getEntities();
	}
	,update: function(dt) {
		Lambda.iter(this.systems,function(system) {
			system.update(dt);
			return;
		});
	}
	,entityAdded: function(componentNames) {
		var familyId = this.getFamilyId(componentNames);
		this.ensureFamilyExists(componentNames);
		var _this = this.families;
		return (__map_reserved[familyId] != null ? _this.getReserved(familyId) : _this.h[familyId]).entityAdded;
	}
	,entityRemoved: function(componentNames) {
		var familyId = this.getFamilyId(componentNames);
		this.ensureFamilyExists(componentNames);
		var _this = this.families;
		return (__map_reserved[familyId] != null ? _this.getReserved(familyId) : _this.h[familyId]).entityRemoved;
	}
	,ensureFamilyExists: function(componentNames) {
		var _gthis = this;
		var familyId = this.getFamilyId(componentNames);
		var _this = this.families;
		if(!(__map_reserved[familyId] != null ? _this.existsReserved(familyId) : _this.h.hasOwnProperty(familyId))) {
			var this1 = this.families;
			var value = new ecs_Family(componentNames.slice(0));
			var _this1 = this1;
			if(__map_reserved[familyId] != null) {
				_this1.setReserved(familyId,value);
			} else {
				_this1.h[familyId] = value;
			}
			Lambda.iter(this.entities,function(entity) {
				Lambda.iter(_gthis.families,function(family) {
					family.addEntityIfMatch(entity);
					return;
				});
				return;
			});
		}
	}
	,getFamilyId: function(componentNames) {
		var this1 = "$" + componentNames.join(",");
		return this1;
	}
	,onComponentAdded: function(msg) {
		Lambda.iter(this.families,function(family) {
			family.onComponentAdded(msg);
			return;
		});
	}
	,onComponentRemoved: function(msg) {
		Lambda.iter(this.families,function(family) {
			family.onComponentRemoved(msg);
			return;
		});
	}
};
var haxe_IMap = function() { };
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,map: function(f) {
		var b = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			b.add(f(v));
		}
		return b;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {};
ecs_Entity.entityId = 0;
})();
